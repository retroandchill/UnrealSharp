<Project Sdk="Microsoft.NET.Sdk">

    <Import Project="UnrealSharpManagedGlue.ubtplugin.csproj.props" Condition="Exists('UnrealSharpManagedGlue.ubtplugin.csproj.props')" />
    <Import Project="$(EngineDir)\Source\Programs\Shared\UnrealEngine.csproj.props" />
    
    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    </PropertyGroup>
    
    <PropertyGroup>
        <Configuration Condition=" '$(Configuration)' == '' ">Development</Configuration>
        <OutputType>Library</OutputType>
        <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
        <RootNamespace>UnrealSharpScriptGenerator</RootNamespace>
        <AssemblyName>UnrealSharpScriptGenerator</AssemblyName>
        <Configurations>Debug;Release;Development</Configurations>
        <DebugType>pdbonly</DebugType>
        <Nullable>enable</Nullable>
        <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' AND '$(PackAsTool)' != 'true'">$(NETCoreSdkRuntimeIdentifier)</RuntimeIdentifier>
    </PropertyGroup>
    
    <ItemGroup>
        <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    </ItemGroup>

    <PropertyGroup>
        <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
    </PropertyGroup>

    <Target Name="GetDependencyTargetPaths">
        <ItemGroup>
            <TargetPathWithTargetPlatformMoniker Include="$(PKGCppAst)\lib\net8.0\CppAst.dll" IncludeRuntimeDependency="true" />
        </ItemGroup>
    </Target>
    
    <ItemGroup>
        <Reference Include="EpicGames.Build">
            <HintPath>$(EngineDir)\Binaries\DotNET\UnrealBuildTool\EpicGames.Build.dll</HintPath>
        </Reference>
        <Reference Include="EpicGames.Core">
            <HintPath>$(EngineDir)\Binaries\DotNET\UnrealBuildTool\EpicGames.Core.dll</HintPath>
        </Reference>
        <Reference Include="EpicGames.UHT">
            <HintPath>$(EngineDir)\Binaries\DotNET\UnrealBuildTool\EpicGames.UHT.dll</HintPath>
        </Reference>
        <Reference Include="UnrealBuildTool">
            <HintPath>$(EngineDir)\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool.dll</HintPath>
        </Reference>
    </ItemGroup>

    <ItemGroup>
        <Compile Include="..\..\Managed\Shared\DotNetUtilities.cs" Link="..\..\..\Managed\Shared\DotNetUtilities.cs" />
    </ItemGroup>

    <ItemGroup>
      <Folder Include="Properties\" />
    </ItemGroup>

    <Target Name="UpdateProjectConstants" BeforeTargets="PrepareForBuild" Condition="Exists('$(EngineDir)\Intermediate\Build\BuildRulesProjects\UE5Rules\UE5Rules.csproj')">
        <AddUnrealConstants
                UE5RulesPath="$(EngineDir)\Intermediate\Build\BuildRulesProjects\UE5Rules\UE5Rules.csproj"
                ProjectConstants="$(DefineConstants)">
            <Output TaskParameter="Result" PropertyName="DefineConstants" />
        </AddUnrealConstants>
    </Target>

    <UsingTask TaskName="AddUnrealConstants"
               TaskFactory="RoslynCodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <UE5RulesPath ParameterType="System.String" Required="true"/>
            <ProjectConstants ParameterType="System.String" Required="true"/>
            <Result ParameterType="System.String" Output="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Xml" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    var document = new XmlDocument();
                    document.Load(UE5RulesPath);
                    
                    var constantsNode = document.DocumentElement.SelectSingleNode("/Project/PropertyGroup/DefineConstants");
                    var constantsString = constantsNode?.InnerText;
                    if(string.IsNullOrWhiteSpace(constantsString)) 
                    {
                        Result = ProjectConstants;
                        return true;
                    }
                    
                    //removing first element "$(DefineConstants)"
                    var unrealConstants = constantsString.Split(';').Skip(1);
                    
                    Result = ProjectConstants + ";" + string.Join(";", unrealConstants);
                ]]>
            </Code>
        </Task>
    </UsingTask>
    
</Project>